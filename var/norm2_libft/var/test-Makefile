NAME		= libft.a

CC		= gcc

RM		= rm -f

CFLAGS		= -Wall -Wextra -Werror -c

LIB		= ar -rc

RAN		= ranlib

SRCS		= ft_atoi.c \
		ft_bzero.c \
		ft_calloc.c \
		ft_isalnum.c \
		ft_isalpha.c \
		ft_isascii.c \
		ft_isdigit.c \
		ft_isprint.c \
		ft_itoa.c \
		ft_memccpy.c \
		ft_memchr.c \
		ft_memcmp.c \
		ft_memcpy.c \
		ft_memmove.c \
		ft_memset.c \
		ft_putchar_fd.c \
		ft_putendl_fd.c \
		ft_putnbr_fd.c \
		ft_putstr_fd.c \
		ft_split.c \
		ft_strchr.c \
		ft_strdup.c \
		ft_strjoin.c \
		ft_strlcat.c \
		ft_strlcpy.c \
		ft_strlen.c \
		ft_strmapi.c \
		ft_strncmp.c \
		ft_strnstr.c \
		ft_strrchr.c \
		ft_strtrim.c \
		ft_substr.c \
		ft_tolower.c \
		ft_toupper.c

SRCS_BONUS	= ft_lstadd_back.c \
		ft_lstadd_front.c \
		ft_lstclear.c \
		ft_lstdelone.c \
		ft_lstiter.c \
		ft_lstlast.c \
		ft_lstnew.c \
		ft_lstsize.c

OBJS		= $(SRCS:.c=.o)

OBJS_BONUS	= $(SRCS_BONUS:.c=.o)

.c.o:
		$(CC) $(CFLAGS) -c $< -o ${<:.c=.o}


$(NAME):	$(OBJS)
			${LIB} $(NAME) $(OBJS)
			${RAN} ${NAME}

all:		$(NAME)

bonus:		${OBJS_BONUS} ${NAME}
			${LIB} $(NAME) $(OBJS_BONUS)
			${RAN} ${NAME}

clean:
			${RM} $(OBJS) $(OBJS_BONUS)

fclean: 	clean
			${RM} ${NAME}

re: 		fclean all

.PHONY:		all clean fclean re



#TEST STUFF
DRV = ./var/libft_driver.c
DBG = -g -fsanitize=address
BSD = -lbsd

test: bonus clean
	@$(CC) -Wall -Wextra -Werror $(DRV) ${NAME} -o test.out
	@./test.out
	@rm -f test.out

memtest: bonus clean
	@$(CC) -Wall -Wextra -Werror $(DRV) $(DBG) ${NAME} -o test.out
	@./test.out
	@rm -f test.out

ltest: bonus clean
	@$(CC) -Wall -Wextra -Werror $(DRV) $(BSD) ${NAME} -o test.out
	@./test.out
	@rm -f test.out

lmemtest: bonus clean
	@$(CC) -Wall -Wextra -Werror $(DRV) $(DBG) $(BSD) ${NAME} -o test.out ; ASAN_OPTIONS=detect_leaks=1
	@./test.out
	@rm -f test.out

valgrind: bonus clean
	@$(CC) -Wall -Wextra -Werror -g $(DRV) $(BSD) ${NAME} -o test.out
	@valgrind --track-origins=yes -s ./test.out
	@rm -f test.out

RED=\033[1;31m
GRE=\033[0;32m
YEL=\033[1;33m
BLK=\033[0;37m
WIP=\033[5;1;34m
RST=\033[0m
status:
	@printf "\n"
	@printf "\033[1mLIBFT STATUS\n"
	@printf "\n"
	@printf "\t\033[1mPart 1\n"
	@printf "${GRE}memset${RST}\t\t${GRE}strrchr${RST}\n"
	@printf "${GRE}bzero${RST}\t\t${GRE}strnstr${RST}\n"
	@printf "${GRE}memcpy${RST}\t\t${GRE}strncmp${RST}\n"
	@printf "${GRE}memccpy${RST}\t\t${GRE}atoi${RST}\n"
	@printf "${GRE}memmove${RST}\t\t${GRE}isalpha${RST}\n"
	@printf "${GRE}memchr${RST}\t\t${GRE}isdigit${RST}\n"
	@printf "${GRE}memcmp${RST}\t\t${GRE}isalnum${RST}\n"
	@printf "${GRE}strlen${RST}\t\t${GRE}isascii${RST}\n"
	@printf "${GRE}strlcpy${RST}\t\t${GRE}isprint${RST}\n"
	@printf "${GRE}strlcat${RST}\t\t${GRE}toupper${RST}\n"
	@printf "${GRE}strchr${RST}\t\t${GRE}tolower${RST}\n"
	@printf "\n"
	@printf "${GRE}calloc${RST}\t\t${GRE}strdup${RST}\n"
	@printf "\n"
	@printf "\t\033[1mPart 2\n"
	@printf "${GRE}ft_substr${RST}\n"
	@printf "${GRE}ft_strjoin${RST}\n"
	@printf "${GRE}ft_strtrim${RST}\n"
	@printf "${GRE}ft_split${RST}\n"
	@printf "${GRE}ft_itoa${RST}\n"
	@printf "${GRE}ft_strmapi${RST}\n"
	@printf "${GRE}ft_putchar_fd${RST}\n"
	@printf "${GRE}ft_putstr_fd${RST}\n"
	@printf "${GRE}ft_putendl_fd${RST}\n"
	@printf "${GRE}ft_putnbr_fd${RST}\n"
	@printf "\n"
	@printf "\t\033[1mBONUS\n"
	@printf "${YEL}ft_lstnew${RST}\n"
	@printf "${YEL}ft_lstadd_front${RST}\n"
	@printf "${YEL}ft_lstsize${RST}\n"
	@printf "${YEL}ft_lstlast${RST}\n"
	@printf "${YEL}ft_lstadd_back${RST}\n"
	@printf "${YEL}ft_lstdelone${RST}\n"
	@printf "${YEL}ft_lstclear${RST}\n"
	@printf "${YEL}ft_lstiter${RST}\n"
	@printf "${WIP}ft_lstmap${RST}\n"

